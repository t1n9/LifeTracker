const fs = require('fs');
const path = require('path');
const { Client } = require('pg');

const TARGET_EMAIL = '1378006836@qq.com';

// Êï∞ÊçÆÂ∫ìËøûÊé•ÈÖçÁΩÆ
const client = new Client({
  host: '120.25.232.54',
  port: 5432,
  database: 'lifetracker',
  user: 'lifetracker',
  password: 'TINGWU...123'
});

function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

async function importUserData() {
  try {
    console.log('üîÑ ÂºÄÂßãÂØºÂÖ•Áî®Êà∑Êï∞ÊçÆ...');
    console.log(`üìß ÁõÆÊ†áÈÇÆÁÆ±: ${TARGET_EMAIL}`);
    
    // ËøûÊé•Êï∞ÊçÆÂ∫ì
    await client.connect();
    console.log('üîó Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü');
    
    // 1. ÂàõÂª∫ÊàñËé∑ÂèñÁî®Êà∑
    let userId;
    const existingUserQuery = 'SELECT id FROM users WHERE email = $1';
    const existingUserResult = await client.query(existingUserQuery, [TARGET_EMAIL]);
    
    if (existingUserResult.rows.length > 0) {
      userId = existingUserResult.rows[0].id;
      console.log(`‚úÖ Áî®Êà∑Â∑≤Â≠òÂú®: ${userId}`);
      
      // Ê∏ÖÁêÜÁé∞ÊúâÊï∞ÊçÆ
      console.log('üßπ Ê∏ÖÁêÜÁé∞ÊúâÊï∞ÊçÆ...');
      await client.query('DELETE FROM expense_records WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM exercise_records WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM health_records WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM daily_data WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM study_records WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM pomodoro_sessions WHERE user_id = $1', [userId]);
      await client.query('DELETE FROM tasks WHERE user_id = $1', [userId]);
      console.log('‚úÖ Áé∞ÊúâÊï∞ÊçÆÊ∏ÖÁêÜÂÆåÊàê');
    } else {
      // ÂàõÂª∫Êñ∞Áî®Êà∑
      console.log('üë§ ÂàõÂª∫Êñ∞Áî®Êà∑...');
      userId = generateUUID();
      const hashedPassword = '$2b$12$dummy.hash.for.imported.user'; // ‰∏¥Êó∂ÂØÜÁ†ÅÂìàÂ∏å
      
      const createUserQuery = `
        INSERT INTO users (id, email, password_hash, name, target_name, target_date, exam_date, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
      `;
      await client.query(createUserQuery, [
        userId,
        TARGET_EMAIL,
        hashedPassword,
        'Êï∞ÊçÆÂØºÂÖ•Áî®Êà∑',
        'ÈõÖÊÄù',
        '2025-08-27',
        '2025-12-20'
      ]);
      
      // ÂàõÂª∫Áî®Êà∑ËÆæÁΩÆ
      const createSettingsQuery = `
        INSERT INTO user_settings (id, user_id, created_at, updated_at)
        VALUES ($1, $2, NOW(), NOW())
      `;
      await client.query(createSettingsQuery, [generateUUID(), userId]);
      
      console.log(`‚úÖ Áî®Êà∑ÂàõÂª∫ÊàêÂäü: ${userId}`);
    }
    
    // 2. ËØªÂèñÊâÄÊúâÊï∞ÊçÆÊñá‰ª∂
    console.log('üìÅ ËØªÂèñÊï∞ÊçÆÊñá‰ª∂...');
    const dataDir = path.join(__dirname, '../../data');
    const files = fs.readdirSync(dataDir).filter(file => file.endsWith('.json'));
    console.log(`üìä ÊâæÂà∞ ${files.length} ‰∏™Êï∞ÊçÆÊñá‰ª∂`);
    
    let importCounts = {
      tasks: 0,
      studyRecords: 0,
      pomodoroSessions: 0,
      exerciseRecords: 0,
      expenseRecords: 0,
      healthRecords: 0,
      dailyData: 0
    };
    
    // 3. ÂØºÂÖ•Êï∞ÊçÆ
    for (const file of files) {
      const filePath = path.join(dataDir, file);
      const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      
      const dateStr = data.date;
      if (!dateStr) {
        console.log(`‚ö†Ô∏è  Ë∑≥ËøáÊñá‰ª∂ ${file}: Ê≤°ÊúâÊó•Êúü‰ø°ÊÅØ`);
        continue;
      }
      
      const date = new Date(dateStr);
      console.log(`üìä Â§ÑÁêÜ ${dateStr} ÁöÑÊï∞ÊçÆ...`);
      
      // ÂØºÂÖ•‰ªªÂä°Êï∞ÊçÆ
      if (data.tasks && data.tasks.length > 0) {
        for (const task of data.tasks) {
          try {
            const taskQuery = `
              INSERT INTO tasks (id, user_id, title, description, is_completed, priority, created_at, updated_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
            `;
            await client.query(taskQuery, [
              generateUUID(), // ÊÄªÊòØÁîüÊàêÊñ∞ÁöÑUUIDÈÅøÂÖçÂÜ≤Á™Å
              userId,
              task.text || task.title || 'Êú™ÂëΩÂêç‰ªªÂä°',
              task.description || null,
              task.completed || false,
              task.priority || 1,
              task.createdAt || new Date(dateStr).toISOString()
            ]);
            importCounts.tasks++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  ‰ªªÂä°ÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }
      }
      
      // ÂØºÂÖ•Â≠¶‰π†ËÆ∞ÂΩï
      if (data.study && data.study.sessions && data.study.sessions.length > 0) {
        for (const session of data.study.sessions) {
          try {
            const studyQuery = `
              INSERT INTO study_records (id, user_id, duration, subject, task_id, started_at, created_at)
              VALUES ($1, $2, $3, $4, $5, $6, $6)
            `;
            await client.query(studyQuery, [
              generateUUID(),
              userId,
              session.duration || 25,
              session.subject || 'Â≠¶‰π†',
              session.taskId ? session.taskId.toString() : null,
              session.timestamp || new Date(dateStr).toISOString()
            ]);
            importCounts.studyRecords++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  Â≠¶‰π†ËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }
      }
      
      // ÂØºÂÖ•Áï™ËåÑÈíüËÆ∞ÂΩï
      if (data.study && data.study.sessions && data.study.sessions.length > 0) {
        for (const session of data.study.sessions) {
          try {
            const pomodoroQuery = `
              INSERT INTO pomodoro_sessions (id, user_id, task_id, duration, status, type, started_at, created_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7, $7)
            `;
            await client.query(pomodoroQuery, [
              generateUUID(),
              userId,
              session.taskId ? session.taskId.toString() : null,
              session.duration || 25,
              'COMPLETED',
              'WORK',
              session.timestamp || new Date(dateStr).toISOString()
            ]);
            importCounts.pomodoroSessions++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  Áï™ËåÑÈíüËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }
      }

      // ÂØºÂÖ•ËøêÂä®ËÆ∞ÂΩï
      if (data.exercise) {
        const exerciseTypes = [
          { key: 'running', name: 'Ë∑ëÊ≠•', value: data.exercise.running, unit: 'km', type: 'DISTANCE' },
          { key: 'pushUps', name: '‰øØÂçßÊíë', value: data.exercise.pushUps, unit: '‰∏™', type: 'COUNT' },
          { key: 'pullUps', name: 'ÂçïÊù†', value: data.exercise.pullUps, unit: '‰∏™', type: 'COUNT' },
          { key: 'squats', name: 'Ê∑±Ëπ≤', value: data.exercise.squats, unit: '‰∏™', type: 'COUNT' },
          { key: 'swimming', name: 'Ê∏∏Ê≥≥', value: data.exercise.swimming, unit: 'km', type: 'DISTANCE' },
          { key: 'cycling', name: 'È™ëËΩ¶', value: data.exercise.cycling, unit: 'km', type: 'DISTANCE' }
        ];

        for (const exerciseType of exerciseTypes) {
          if (exerciseType.value > 0) {
            try {
              // Á°Æ‰øùËøêÂä®Á±ªÂûãÂ≠òÂú®
              const exerciseTypeQuery = `
                INSERT INTO exercise_types (id, user_id, name, type, unit, created_at, updated_at)
                VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
                ON CONFLICT (user_id, name) DO UPDATE SET updated_at = NOW()
                RETURNING id
              `;
              const exerciseTypeId = generateUUID();
              await client.query(exerciseTypeQuery, [
                exerciseTypeId,
                userId,
                exerciseType.name,
                exerciseType.type,
                exerciseType.unit
              ]);

              // Ëé∑ÂèñËøêÂä®Á±ªÂûãID
              const getTypeIdQuery = `SELECT id FROM exercise_types WHERE user_id = $1 AND name = $2`;
              const typeIdResult = await client.query(getTypeIdQuery, [userId, exerciseType.name]);
              const actualExerciseTypeId = typeIdResult.rows[0]?.id || exerciseTypeId;

              // ÊèíÂÖ•ËøêÂä®ËÆ∞ÂΩï
              const exerciseRecordQuery = `
                INSERT INTO exercise_records (id, user_id, exercise_id, date, value, unit, created_at, updated_at)
                VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
                ON CONFLICT (user_id, exercise_id, date) DO UPDATE SET
                  value = EXCLUDED.value,
                  updated_at = NOW()
              `;
              await client.query(exerciseRecordQuery, [
                generateUUID(),
                userId,
                actualExerciseTypeId,
                dateStr,
                exerciseType.value,
                exerciseType.unit
              ]);
              importCounts.exerciseRecords++;
            } catch (error) {
              console.log(`‚ö†Ô∏è  ËøêÂä®ËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥• (${exerciseType.name}): ${error.message}`);
            }
          }
        }
      }

      // ÂØºÂÖ•Ê∂àË¥πËÆ∞ÂΩï
      if (data.expenses) {
        const expenses = data.expenses;

        // ÂØºÂÖ•Êó©È§êËÆ∞ÂΩï
        if (expenses.breakfast > 0) {
          try {
            await client.query(`
              INSERT INTO expense_records (id, user_id, date, type, category, amount, description, created_at, updated_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8)
            `, [
              generateUUID(),
              userId,
              dateStr,
              'MEAL',
              'breakfast',
              expenses.breakfast,
              'Êó©È§ê',
              new Date(dateStr).toISOString()
            ]);
            importCounts.expenseRecords++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  Êó©È§êËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }

        // ÂØºÂÖ•ÂçàÈ§êËÆ∞ÂΩï
        if (expenses.lunch > 0) {
          try {
            await client.query(`
              INSERT INTO expense_records (id, user_id, date, type, category, amount, description, created_at, updated_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8)
            `, [
              generateUUID(),
              userId,
              dateStr,
              'MEAL',
              'lunch',
              expenses.lunch,
              'ÂçàÈ§ê',
              new Date(dateStr).toISOString()
            ]);
            importCounts.expenseRecords++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  ÂçàÈ§êËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }

        // ÂØºÂÖ•ÊôöÈ§êËÆ∞ÂΩï
        if (expenses.dinner > 0) {
          try {
            await client.query(`
              INSERT INTO expense_records (id, user_id, date, type, category, amount, description, created_at, updated_at)
              VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8)
            `, [
              generateUUID(),
              userId,
              dateStr,
              'MEAL',
              'dinner',
              expenses.dinner,
              'ÊôöÈ§ê',
              new Date(dateStr).toISOString()
            ]);
            importCounts.expenseRecords++;
          } catch (error) {
            console.log(`‚ö†Ô∏è  ÊôöÈ§êËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
          }
        }

        // ÂØºÂÖ•ÂÖ∂‰ªñÊ∂àË¥πËÆ∞ÂΩï
        if (expenses.other && Array.isArray(expenses.other)) {
          for (const otherExpense of expenses.other) {
            if (otherExpense.amount > 0) {
              try {
                await client.query(`
                  INSERT INTO expense_records (id, user_id, date, type, category, amount, description, created_at, updated_at)
                  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8)
                `, [
                  generateUUID(),
                  userId,
                  dateStr,
                  'OTHER',
                  'other',
                  otherExpense.amount,
                  otherExpense.name || otherExpense.description || 'ÂÖ∂‰ªñÊ∂àË¥π',
                  new Date(dateStr).toISOString()
                ]);
                importCounts.expenseRecords++;
              } catch (error) {
                console.log(`‚ö†Ô∏è  ÂÖ∂‰ªñÊ∂àË¥πËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
              }
            }
          }
        }
      }

      // ÂØºÂÖ•ÂÅ•Â∫∑ËÆ∞ÂΩï
      if (data.health) {
        try {
          const healthQuery = `
            INSERT INTO health_records (id, user_id, date, weight, sleep_hours, sleep_quality, phone_usage, created_at, updated_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
            ON CONFLICT (user_id, date) DO UPDATE SET
              weight = EXCLUDED.weight,
              sleep_hours = EXCLUDED.sleep_hours,
              sleep_quality = EXCLUDED.sleep_quality,
              phone_usage = EXCLUDED.phone_usage,
              updated_at = NOW()
          `;
          await client.query(healthQuery, [
            generateUUID(),
            userId,
            dateStr,
            data.health.weight || null,
            data.health.sleepHours || null,
            data.health.sleepQuality || null,
            data.health.phoneUsage || null
          ]);
          importCounts.healthRecords++;
        } catch (error) {
          console.log(`‚ö†Ô∏è  ÂÅ•Â∫∑ËÆ∞ÂΩïÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
        }
      }

      // ÂØºÂÖ•ÊØèÊó•Êï∞ÊçÆ
      if (data.dayStart || data.dayReflection || data.exercise?.feeling) {
        try {
          const dailyDataQuery = `
            INSERT INTO daily_data (id, user_id, date, day_start, day_reflection, reflection_time, exercise_feeling, created_at, updated_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
            ON CONFLICT (user_id, date) DO UPDATE SET
              day_start = EXCLUDED.day_start,
              day_reflection = EXCLUDED.day_reflection,
              reflection_time = EXCLUDED.reflection_time,
              exercise_feeling = EXCLUDED.exercise_feeling,
              updated_at = NOW()
          `;
          await client.query(dailyDataQuery, [
            generateUUID(),
            userId,
            dateStr,
            data.dayStart || null,
            data.dayReflection || null,
            data.reflectionTime || null,
            data.exercise?.feeling || null
          ]);
          importCounts.dailyData++;
        } catch (error) {
          console.log(`‚ö†Ô∏è  ÊØèÊó•Êï∞ÊçÆÂØºÂÖ•Â§±Ë¥•: ${error.message}`);
        }
      }
    }

    console.log(`\nüéâ Êï∞ÊçÆÂØºÂÖ•ÂÆåÊàê!`);
    console.log(`üë§ Áî®Êà∑ID: ${userId}`);
    console.log(`üìß ÈÇÆÁÆ±: ${TARGET_EMAIL}`);
    console.log(`üîë Ê≥®ÊÑè: ËØ∑ÈÄöËøáÁÆ°ÁêÜÂëòÈáçÁΩÆÂØÜÁ†Å`);
    console.log(`\nüìä ÂØºÂÖ•ÁªüËÆ°:`);
    console.log(`‚úÖ ‰ªªÂä°: ${importCounts.tasks} Êù°`);
    console.log(`‚úÖ Â≠¶‰π†ËÆ∞ÂΩï: ${importCounts.studyRecords} Êù°`);
    console.log(`‚úÖ Áï™ËåÑÈíü: ${importCounts.pomodoroSessions} Êù°`);
    console.log(`‚úÖ ËøêÂä®ËÆ∞ÂΩï: ${importCounts.exerciseRecords} Êù°`);
    console.log(`‚úÖ Ê∂àË¥πËÆ∞ÂΩï: ${importCounts.expenseRecords} Êù°`);
    console.log(`‚úÖ ÂÅ•Â∫∑ËÆ∞ÂΩï: ${importCounts.healthRecords} Êù°`);
    console.log(`‚úÖ ÊØèÊó•Êï∞ÊçÆ: ${importCounts.dailyData} Êù°`);
    
  } catch (error) {
    console.error('‚ùå ÂØºÂÖ•Êï∞ÊçÆÊó∂Âá∫Èîô:', error);
  } finally {
    await client.end();
  }
}

// ËøêË°åÂØºÂÖ•ËÑöÊú¨
importUserData();
