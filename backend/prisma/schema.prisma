generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  passwordHash     String            @map("password_hash")
  name             String?
  targetName       String?           @map("target_name")
  targetDate       DateTime?         @map("target_date") @db.Timestamptz(6)
  examDate         DateTime?         @map("exam_date") @db.Timestamptz(6)
  timezone         String            @default("Asia/Shanghai")
  theme            String            @default("dark")
  isActive         Boolean           @default(true) @map("is_active")
  emailVerified    Boolean           @default(false) @map("email_verified")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  showPullUps      Boolean?          @default(true) @map("show_pull_ups")
  showSquats       Boolean?          @default(true) @map("show_squats")
  showPushUps      Boolean?          @default(true) @map("show_push_ups")
  showRunning      Boolean?          @default(true) @map("show_running")
  showSwimming     Boolean?          @default(false) @map("show_swimming")
  showCycling      Boolean?          @default(false) @map("show_cycling")
  countdowns       Countdown[]
  dailyData        DailyData[]
  exerciseRecords  ExerciseRecord[]  @relation("UserExerciseRecords")
  exerciseTypes    ExerciseType[]    @relation("UserExerciseTypes")
  expenseRecords   ExpenseRecord[]   @relation("UserExpenseRecords")
  healthRecords    HealthRecord[]
  importantInfos   ImportantInfo[]
  pomodoroSessions PomodoroSession[]
  studyRecords     StudyRecord[]
  tasks            Task[]
  userSettings     UserSettings?

  @@map("users")
}

model UserSettings {
  id                     String  @id @default(uuid())
  userId                 String  @unique @map("user_id")
  pomodoroWorkDuration   Int     @default(25) @map("pomodoro_work_duration")
  pomodoroBreakDuration  Int     @default(5) @map("pomodoro_break_duration")
  pomodoroLongBreak      Int     @default(15) @map("pomodoro_long_break")
  pomodoroSoundEnabled   Boolean @default(true) @map("pomodoro_sound_enabled")
  notificationsEnabled   Boolean @default(true) @map("notifications_enabled")
  dailyGoalHours         Float   @default(8.0) @map("daily_goal_hours")
  weeklyGoalHours        Float   @default(40.0) @map("weekly_goal_hours")
  studySubjects          Json    @default("{}") @map("study_subjects")
  exerciseTypes          Json    @default("{}") @map("exercise_types")
  expenseCategories      Json    @default("{}") @map("expense_categories")
  themeConfig            Json    @default("{}") @map("theme_config")
  currentImportantInfoId String? @map("current_important_info_id")
  user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Task {
  id               String            @id @default(uuid())
  userId           String            @map("user_id")
  title            String
  description      String?
  subject          String?
  priority         Int               @default(0)
  isCompleted      Boolean           @default(false) @map("is_completed")
  dueDate          DateTime?         @map("due_date") @db.Timestamptz(6)
  estimatedHours   Float?            @map("estimated_hours")
  actualHours      Float?            @map("actual_hours")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  pomodoroSessions PomodoroSession[]
  studyRecords     StudyRecord[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model StudyRecord {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  taskId      String?   @map("task_id")
  duration    Int
  subject     String?
  notes       String?
  startedAt   DateTime  @map("started_at") @db.Timestamptz(6)
  completedAt DateTime? @map("completed_at") @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("study_records")
}

model PomodoroSession {
  id             String         @id @default(uuid())
  userId         String         @map("user_id")
  taskId         String?        @map("task_id")
  duration       Int
  actualDuration Int?           @map("actual_duration")
  status         PomodoroStatus
  type           PomodoroType   @default(WORK)
  startedAt      DateTime       @map("started_at") @db.Timestamptz(6)
  completedAt    DateTime?      @map("completed_at") @db.Timestamptz(6)
  pausedAt       DateTime?      @map("paused_at") @db.Timestamptz(6)
  resumedAt      DateTime?      @map("resumed_at") @db.Timestamptz(6)
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  countUpTime    Int?           @default(0) @map("count_up_time")
  isCountUpMode  Boolean        @default(false) @map("is_count_up_mode")
  task           Task?          @relation(fields: [taskId], references: [id])
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pomodoro_sessions")
}

model Countdown {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  description String?
  targetDate  DateTime @map("target_date") @db.Timestamptz(6)
  isActive    Boolean  @default(true) @map("is_active")
  color       String   @default("#3182CE")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("countdowns")
}

model DailyData {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  date            DateTime @db.Date
  totalMinutes    Int      @default(0) @map("total_minutes")
  pomodoroCount   Int      @default(0) @map("pomodoro_count")
  dayStart        String?  @map("day_start")
  dayReflection   String?  @map("day_reflection")
  reflectionTime  String?  @map("reflection_time")
  focusMode       Boolean  @default(false) @map("focus_mode")
  focusQuoteIndex Int      @default(0) @map("focus_quote_index")
  exerciseFeeling String?  @map("exercise_feeling")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_data")
}

model ImportantInfo {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("important_info")
}

model ExerciseRecord {
  id         String       @id @default(uuid())
  userId     String       @map("user_id")
  exerciseId String       @map("exercise_id")
  date       DateTime     @db.Date
  value      Float
  unit       String
  notes      String?
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  exercise   ExerciseType @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user       User         @relation("UserExerciseRecords", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId, date])
  @@index([userId, date])
  @@index([userId, exerciseId])
  @@map("exercise_records")
}

model ExerciseType {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  name      String
  type      ExerciseTypeEnum
  unit      String
  increment Float?
  icon      String?
  color     String?
  isActive  Boolean          @default(true) @map("is_active")
  sortOrder Int              @default(0) @map("sort_order")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  records   ExerciseRecord[]
  user      User             @relation("UserExerciseTypes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("exercise_types")
}

model MigrationLog {
  id            String   @id @default(uuid())
  migrationName String   @map("migration_name")
  status        String
  details       String?
  createdAt     DateTime @map("created_at") @db.Timestamptz(6)

  @@map("migration_logs")
}

model ExpenseRecord {
  id          String          @id @default(uuid())
  userId      String          @map("user_id")
  date        DateTime        @db.Date
  type        ExpenseTypeEnum
  category    String
  amount      Float
  description String?
  time        String?
  notes       String?
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User            @relation("UserExpenseRecords", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, type])
  @@index([userId, date, type])
  @@map("expense_records")
}

model HealthRecord {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  date         DateTime @db.Date
  weight       Float?
  sleepHours   Float?   @map("sleep_hours")
  sleepQuality Int?     @map("sleep_quality")
  phoneUsage   Float?   @map("phone_usage")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("health_records")
}

enum ExerciseTypeEnum {
  COUNT
  DISTANCE
}

enum ExpenseTypeEnum {
  MEAL
  OTHER
}

enum PomodoroStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum PomodoroType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}
