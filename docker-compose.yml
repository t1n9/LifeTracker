version: '3.3'

services:
  # PostgreSQL Database
  postgres:
    image: https://rugjamqi.mirror.aliyuncs.com
    container_name: lifetracker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-lifetracker}
      POSTGRES_USER: ${DB_USER:-lifetracker}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your-secure-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lifetracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lifetracker -d lifetracker"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lifetracker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lifetracker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lifetracker-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-lifetracker}:${DB_PASSWORD:-your-secure-password}@postgres:5432/${DB_NAME:-lifetracker}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: https://${DOMAIN_NAME:-localhost}
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - lifetracker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      timeout: 10s
      retries: 5

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lifetracker-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: https://${DOMAIN_NAME:-localhost}/api
      NEXT_PUBLIC_APP_URL: https://${DOMAIN_NAME:-localhost}
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - lifetracker-network

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: lifetracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - lifetracker-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lifetracker-network:
    driver: bridge
