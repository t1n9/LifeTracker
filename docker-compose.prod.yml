version: '3.3'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lifetracker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-lifetracker}
      POSTGRES_USER: ${DB_USER:-lifetracker}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your-secure-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lifetracker-network
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lifetracker-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - lifetracker-network
    ports:
      - "6379:6379"

  # Backend Service (使用预编译文件)
  backend:
    image: node:18-alpine
    container_name: lifetracker-backend
    restart: unless-stopped
    working_dir: /app
    command: sh -c "
      echo 'Installing production dependencies...' &&
      npm ci --only=production &&
      echo 'Starting backend server...' &&
      node backend-dist/main.js"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-lifetracker}:${DB_PASSWORD:-your-secure-password}@postgres:5432/${DB_NAME:-lifetracker}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: https://${DOMAIN_NAME:-localhost}
      PORT: 3002
    volumes:
      - ./backend-dist:/app/backend-dist:ro
      - ./backend-package.json:/app/package.json:ro
      - ./backend-package-lock.json:/app/package-lock.json:ro
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - lifetracker-network
    ports:
      - "3002:3002"

  # Frontend Service (使用预编译文件)
  frontend:
    image: node:18-alpine
    container_name: lifetracker-frontend
    restart: unless-stopped
    working_dir: /app
    command: sh -c "
      echo 'Installing production dependencies...' &&
      npm ci --only=production &&
      echo 'Starting frontend server...' &&
      npm start"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: https://${DOMAIN_NAME:-localhost}/api
      NEXT_PUBLIC_APP_URL: https://${DOMAIN_NAME:-localhost}
      PORT: 3000
    volumes:
      - ./frontend-dist:/app/.next:ro
      - ./frontend-package.json:/app/package.json:ro
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - lifetracker-network
    ports:
      - "3001:3000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lifetracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - lifetracker-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  lifetracker-network:
    driver: bridge
